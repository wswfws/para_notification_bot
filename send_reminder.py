from datetime import datetime, timedelta
from telegram.ext import ContextTypes
from ics import Event
from config import EKATERINBURG_TZ
from bd.ScheduleStorage import ScheduleStorage

storage = ScheduleStorage()


async def check_and_send_reminders(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(EKATERINBURG_TZ)

    for user_id, events in storage.get_all_schedules().items():
        for event in events:
            event_dt = event.begin.datetime.astimezone(EKATERINBURG_TZ)
            notify_time = event_dt - timedelta(minutes=5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–π—á–∞—Å
            if notify_time <= now < event_dt:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                last_notified = storage.get_last_notified(user_id, event.name, event_dt)
                if last_notified is None or last_notified < notify_time:
                    text = (
                        f"‚è∞ –°–∫–æ—Ä–æ –ø–∞—Ä–∞!\n"
                        f"üìö {event.name}\n"
                        f"üìç {event.location or '–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                        f"üïí –ù–∞—á–∞–ª–æ –≤ {event_dt.strftime('%H:%M')}\n"
                    )
                    try:
                        await context.bot.send_message(chat_id=user_id, text=text)
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        storage.update_last_notified(user_id, event.name, event_dt, now)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")