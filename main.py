import os
from telegram import Update, Document
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from ics import Calendar
from datetime import datetime, timedelta, date
import tempfile
from pytz import timezone
import locale

from config import TOKEN

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç
try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except:
    locale.setlocale(locale.LC_TIME, 'ru_RU')

user_schedules = {}
EKATERINBURG_TZ = timezone('Asia/Yekaterinburg')  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞


def format_datetime(dt: datetime, time_only: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç datetime –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞"""
    dt = dt.astimezone(EKATERINBURG_TZ)
    if time_only:
        return dt.strftime("%H:%M")
    return dt.strftime("%a, %d %b %Y –≤ %H:%M")


def format_timedelta(td: timedelta) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timedelta –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"""
    hours, remainder = divmod(td.seconds, 3600)
    minutes = remainder // 60
    return f"{hours} —á {minutes} –º–∏–Ω" if hours else f"{minutes} –º–∏–Ω"


async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today_events = []

    if user_id not in user_schedules:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–∏—à–ª–∏ .ics —Ñ–∞–π–ª.")
        return

    events = sorted(user_schedules[user_id], key=lambda e: e.begin.datetime)

    for event in events:
        event_date = event.begin.datetime.astimezone(EKATERINBURG_TZ).date()
        if event_date == date.today():
            time_str = format_datetime(event.begin.datetime, time_only=True)
            location = event.location or "–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            today_events.append(f"üïí {time_str} ‚Äî {event.name} ({location})")

    if not today_events:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä! üéâ")
    else:
        msg = "üìÖ –¢–≤–æ–∏ –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + "\n".join(today_events)
        await update.message.reply_text(msg)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ .ics\n"
        f"–¢–µ–∫—É—â–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (Asia/Yekaterinburg)\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/today - –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/reminders - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    )


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc: Document = update.message.document
    if not doc.file_name.endswith(".ics"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .ics")
        return

    file = await context.bot.get_file(doc.file_id)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".ics") as temp_file:
        await file.download_to_drive(temp_file.name)

        with open(temp_file.name, 'r', encoding='utf-8') as f:
            cal = Calendar(f.read())

        user_id = update.effective_user.id
        user_schedules[user_id] = []
        reminders_count = 0

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_jobs = [job for job in context.job_queue.jobs() if str(user_id) in job.name]
        for job in current_jobs:
            job.schedule_removal()

        for event in cal.events:
            event_dt = event.begin.datetime.astimezone(EKATERINBURG_TZ)
            user_schedules[user_id].append(event)

            notify_time = event_dt - timedelta(minutes=5)
            now = datetime.now(EKATERINBURG_TZ)

            if notify_time > now:
                context.job_queue.run_once(
                    callback=send_reminder,
                    when=(notify_time - now),
                    user_id=user_id,
                    data={
                        "event_name": event.name,
                        "location": event.location,
                        "event_time": event_dt,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º datetime –æ–±—ä–µ–∫—Ç
                        "notify_time": notify_time  # –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    },
                    name=f"{user_id}_{event.name}_{event_dt.timestamp()}"
                )
                reminders_count += 1

        await update.message.reply_text(
            f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n"
            f"–í—Å–µ–≥–æ –ø–∞—Ä: {len(user_schedules[user_id])}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_count}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /reminders –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )


async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    text = (
        f"‚è∞ –°–∫–æ—Ä–æ –ø–∞—Ä–∞!\n"
        f"üìö {job.data['event_name']}\n"
        f"üìç {job.data['location'] or '–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üïí –ù–∞—á–∞–ª–æ –≤ {job.data['start_time']}\n"
        f"üìÖ {job.data['full_time']}"
    )
    try:
        await context.bot.send_message(chat_id=job.user_id, text=text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def show_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        # –ò—â–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_jobs = [job for job in context.job_queue.jobs() if str(user_id) in job.name]

        if not user_jobs:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return

        reminders = []
        now = datetime.now(EKATERINBURG_TZ)

        for job in sorted(user_jobs, key=lambda j: j.data["event_time"]):
            try:
                event_time = job.data["event_time"]
                notify_time = job.data["notify_time"]
                time_left = notify_time - now

                if time_left.total_seconds() > 0:
                    reminders.append(
                        f"üìå {job.data.get('event_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤: {format_datetime(notify_time)}\n"
                        f"üïí –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã: {format_datetime(event_time)}\n"
                        f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {format_timedelta(time_left)}\n"
                        f"üìç {job.data.get('location', '–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                continue

        if not reminders:
            await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            for i in range(0, len(reminders), 5):
                chunk = reminders[i:i + 5]
                await update.message.reply_text(
                    "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n" +
                    "\n".join(chunk)
                )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_reminders: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reminders", show_reminders))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π Asia/Yekaterinburg...")
    app.run_polling()