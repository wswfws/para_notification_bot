import locale
from datetime import datetime, date

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from config import TOKEN, EKATERINBURG_TZ
from format import format_datetime, format_timedelta
from handle_document import handle_document, restore_reminders, storage

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç
try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except:
    locale.setlocale(locale.LC_TIME, 'ru_RU')


async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today_events = []

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    events = storage.load_schedule(user_id)

    if not events:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–∏—à–ª–∏ .ics —Ñ–∞–π–ª.")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    events = sorted(events, key=lambda e: e.begin.datetime)

    current_date = date.today()
    for event in events:
        event_date = event.begin.datetime.astimezone(EKATERINBURG_TZ).date()
        if event_date == current_date:
            time_str = format_datetime(event.begin.datetime, time_only=True)
            location = event.location or "–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            today_events.append(f"üïí {time_str} ‚Äî {event.name} ({location})")

    if not today_events:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä! üéâ")
    else:
        msg = "üìÖ –¢–≤–æ–∏ –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + "\n".join(today_events)
        await update.message.reply_text(msg)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ .ics\n"
        f"–¢–µ–∫—É—â–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (Asia/Yekaterinburg)\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/today - –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/reminders - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    )


async def show_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        # –ò—â–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_jobs = [job for job in context.job_queue.jobs() if str(user_id) in job.name]

        if not user_jobs:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return

        reminders = []
        now = datetime.now(EKATERINBURG_TZ)

        for job in sorted(user_jobs, key=lambda j: j.data["event_time"]):
            try:
                event_time = job.data["event_time"]
                notify_time = job.data["notify_time"]
                time_left = notify_time - now

                if time_left.total_seconds() > 0:
                    reminders.append(
                        f"üìå {job.data.get('event_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤: {format_datetime(notify_time)}\n"
                        f"üïí –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã: {format_datetime(event_time)}\n"
                        f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {format_timedelta(time_left)}\n"
                        f"üìç {job.data.get('location', '–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                continue

        if not reminders:
            await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            for i in range(0, len(reminders), 5):
                chunk = reminders[i:i + 5]
                await update.message.reply_text(
                    "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n" +
                    "\n".join(chunk)
                )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_reminders: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")


if __name__ == "__main__":
    builder = ApplicationBuilder()
    builder.token(TOKEN)
    builder.post_init(restore_reminders)

    app = builder.build()

    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reminders", show_reminders))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π Asia/Yekaterinburg...")
    app.run_polling()
