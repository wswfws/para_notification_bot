import os
from telegram import Update, Document
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from ics import Calendar
from datetime import datetime, timedelta, date
import tempfile

from config import TOKEN

user_schedules = {}


# –ö–æ–º–∞–Ω–¥–∞ /—Å–µ–≥–æ–¥–Ω—è ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today_events = []

    if user_id not in user_schedules:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–∏—à–ª–∏ .ics —Ñ–∞–π–ª.")
        return

    events = sorted(user_schedules[user_id], key=lambda e: e.begin.datetime)

    for event in events:
        event_date = event.begin.datetime.astimezone().date()
        if event_date == date.today():
            time_str = event.begin.to('local').format('HH:mm')
            today_events.append(f"üïí {time_str} ‚Äî {event.name} ({event.location or '–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'})")

    if not today_events:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä! üéâ")
    else:
        msg = "üìÖ –¢–≤–æ–∏ –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + "\n".join(today_events)
        await update.message.reply_text(msg)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ .ics —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–∞—Ä.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ ics —Ñ–∞–π–ª–∞
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc: Document = update.message.document
    if not doc.file_name.endswith(".ics"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .ics")
        return

    file = await context.bot.get_file(doc.file_id)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".ics") as temp_file:
        await file.download_to_drive(temp_file.name)

        with open(temp_file.name, 'r', encoding='utf-8') as f:
            cal = Calendar(f.read())

        user_id = update.effective_user.id
        user_schedules[user_id] = []

        for event in cal.events:
            user_schedules[user_id].append(event)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
            notify_time = event.begin.datetime - timedelta(minutes=5)

            if notify_time > datetime.now(notify_time.tzinfo):
                context.job_queue.run_once(
                    callback=send_reminder,
                    when=notify_time,
                    user_id=user_id,
                    data={
                        "event_name": event.name,
                        "location": event.location,
                        "start_time": event.begin.to('local').format('HH:mm')
                    },
                )

        await update.message.reply_text(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_schedules[user_id])} –ø–∞—Ä!")


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    text = (
        f"‚è∞ –°–∫–æ—Ä–æ –ø–∞—Ä–∞!\n"
        f"üìö {job.data['event_name']}\n"
        f"üìç {job.data['location'] or '–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üïí –ù–∞—á–∞–ª–æ –≤ {job.data['start_time']}"
    )
    try:
        await context.bot.send_message(chat_id=job.user_id, text=text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()