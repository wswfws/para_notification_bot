from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import ContextTypes

from bd.ScheduleStorage import ScheduleStorage
from config import EKATERINBURG_TZ
from format import format_datetime, format_timedelta

storage = ScheduleStorage()


async def show_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        events = storage.load_schedule(user_id)

        if not events:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            return

        reminders = []
        now = datetime.now(EKATERINBURG_TZ)

        for event in sorted(events, key=lambda e: e.begin.datetime):
            try:
                event_dt = event.begin.datetime.astimezone(EKATERINBURG_TZ)
                notify_time = event_dt - timedelta(minutes=5)
                time_left = notify_time - now

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
                if event_dt > now:
                    reminders.append(
                        f"üìå {event.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤: {format_datetime(notify_time)}\n"
                        f"üïí –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã: {format_datetime(event_dt)}\n"
                        f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {format_timedelta(time_left)}\n"
                        f"üìç {event.location or '–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                continue

        if not reminders:
            await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç (–≤—Å–µ —Å–æ–±—ã—Ç–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∏)")
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            for i in range(0, len(reminders), 5):
                chunk = reminders[i:i + 5]
                await update.message.reply_text(
                    "üìã –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n" +
                    "\n".join(chunk)
                )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_reminders: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
